import React, {Component} from 'react';
import {connect} from "react-redux";
import {Row, Col, Button, ListGroup, ListGroupItem, Input, Table} from 'reactstrap';
import Joyride from 'react-joyride';
import actions from '../actions';
import steps from '../joyrideSteps';
import MoneySpentModal from './moneySpentModal';
import {validate, ValidatedInput, ValidatedSelect, ValidatedDatePicker} from '../../../components/validationFields';
import 'react-dates/initialize';
import moment from 'moment';
import {toCurr} from "../../../utils";
import Uploader from '../../../components/uploader';
import Select from '../../../components/select';
import confirmation from '../../../components/confirmationModal';
import canEdit from '../../../components/canEdit';

class NewApproval extends Component {
  state = {
    type: 'purchase',
    num: null,
    approvers: [],
    properties: [],
    params: {
      payee_id: null,
      amount: null,
      description: null,
    },
    costs: [{category_id: null, amount: null}],
    attachments: [],
    unit: null,
    tutorial: false,
    inserted_at: moment(),
    property_id: null,
    approval_logs: null,
  };

  idx = 1;

  addAttachment(newAttachments){
    const attachments = [...this.state.attachments];
    newAttachments[0] && newAttachments.forEach(attachment => {
      if(attachment.filename){
        attachment.upload().then(() => {
          attachments.push({filename: attachment.filename, uuid: attachment.uuid});
          this.setState({attachments: attachments});
        });
        this.refs.child && this.refs.child.clear();
      }
    })

  }

  change({target: {name, value}}) {
    this.setState({[name]: value});
  }

  changeProperty({target: {value}}) {
    actions.fetchCategories(value);
    this.setState({property_id: value})
  }

  changeParams({target: {name, value}}) {
    const {params} = this.state;
    params[name] = value;
    this.setState({...this.state, params: params})
    // if (name === "payee_id") this.getPurchaseNumber();
  }

  changeCosts(index, {target: {name, value}}) {
    const {costs, params} = this.state;
    costs[index][name] = value;
    if (name === "amount") {
      params.amount = this.totalAmounts();
    }
    this.setState({...this.state, params: params, costs: costs})
  }

  totalAmounts() {
    const {costs} = this.state;
    return costs.reduce((acc, c) => {
      if (!c.amount) return acc;
      return acc + parseFloat(c.amount)
    }, 0);
  }

  addCostObject() {
    const {costs} = this.state;
    let last = costs.slice(-1)[0];
    if (!last.amount) return;
    costs.push({category_id: null, amount: null});
    this.setState({...this.state, costs: costs})
  }

  deleteCostObject(i) {
    const {costs} = this.state;
    costs.splice(i, 1);
    this.setState({...this.state, costs: costs})
  }

  //PURCHASE NUMBER NOW GETS GENERATED BY BACKEND WHEN APPROVAL GETS CREATED
  getPurchaseNumber() {
    const {params, property_id} = this.state;
    actions.fetchApprovalNumber(params.payee_id, property_id).then(r => {
      this.setState({...this.state, num: r.data})
    })
  }

  clear() {
    confirmation("Really clear all information from the form?").then(this.bypassConfirmClear.bind(this))
  }

  bypassConfirmClear() {
    this.idx += 1
    this.setState({type: 'purchase', num: '', approval_logs: null, addtlProperty: null, params: {payee_id: null, amount: null, description: null}, attachments: [], costs: [{category_id: null, amount: null}], unit: null})
  }

  canSave() {
    let approval = this.state;
    validate(this).then(() => {
      confirmation(`Please double check the total you are requesting approval for. ${toCurr(approval.params.amount)} is the amount you entered.`).then(() => {
        if (approval.unit) {
          approval.params.description = approval.params.description.concat(` Unit-${approval.unit}`)
        };
        actions.saveApproval(approval, this.props.history).then(this.bypassConfirmClear.bind(this))
      })
    })
  }

  removeAttachment(index) {
    const {attachments} = this.state;
    attachments.splice(index, 1)
    this.setState({...this.state, attachments: attachments})
  }

  saveVendor(){
    const {newPayee} = this.state;
    actions.createVendor({name: newPayee}).then(() => this.setState({togglePayee: false, newPayee: null, }));
  }

  changeDate({target: {value}}) {
      this.setState({...this.state, inserted_at: moment(value).utc()});
  }

  // renderCalendarInfo() {
  //   return <div>Can only select up to two months in advance</div>;
  // }

  toggleTutorial() {
    this.setState({...this.state, tutorial: !this.state.tutorial})
  }

  toggleMoneySpentModal(category) {
    this.setState({...this.state, moneySpentModal: category})
  }

  render() {
    const {payees, approvers, accountingCategories, properties, history} = this.props;
    const {params, approver, attachments, togglePayee, newPayee, unit, costs, moneySpentModal, tutorial, addtlProperty, property_id, inserted_at, approval_logs} = this.state;
    this.addCostObject();
    return <Row key={this.idx}>
      <Joyride steps={steps} run={tutorial} continuous showProgress showSkipButton />
      {moneySpentModal && <MoneySpentModal property_id={property_id} category={moneySpentModal} toggle={this.toggleMoneySpentModal.bind(this, null)} />}
      <Col>
        <Row className="mt-2">
          <Col>
            <Row className="w-100">
              <Col className="mr-1 pr-0">
                <div className="labeled-box my-2 jr-step-5">
                  <Select name="property_id"
                    value={property_id}
                    onChange={this.changeProperty.bind(this)}
                    options={properties.map(p => {
                      return {label: p.name, value: p.id}
                    })}
                  />
                  <div className="labeled-box-label">Property</div>
                </div>
              </Col>
            </Row>
            <Row className="w-100">
              <Col className="mr-1 pr-0">
                <div className="labeled-box jr-step-1">
                  <ValidatedSelect context={this}
                                  validation={d => !!d}
                                  name="payee_id"
                                  value={params.payee_id}
                                  onChange={this.changeParams.bind(this)}
                                  options={payees.map(p => {
                                    return {label: p.name, value: p.id}
                                  })}
                                  feedback="Vendor is Required" />
                  <div className="labeled-box-label">Vendor</div>
                </div>
              </Col>
              {canEdit(["Super Admin", "Regional"]) && <Button outline onClick={() => this.setState({...this.state, togglePayee: !this.state.togglePayee})}>
                <i className="fas fa-plus" />
              </Button>}
            </Row>
            {togglePayee && <Row>
              <Col>
                <div className="labeled-box mt-2">
                  <Input value={newPayee} onChange={this.change.bind(this)} name="newPayee"/>
                  <div className="labeled-box-label">Vendor</div>
                </div>
                <Button disabled={!newPayee} onClick={this.saveVendor.bind(this)}>Save</Button>
              </Col>
            </Row>}
          </Col>
          <Col>
            <div className="labeled-box jr-step-2 mt-2">
              <ValidatedDatePicker  onChange={this.changeDate.bind(this)}
                                    value={inserted_at}
                                    context={this}
                                    validation={(d) => true}
                                    name="approval-date"
                                    calendarInfoPosition="bottom" renderCalendarInfo={() => (<div className="ml-1">You can select a date up to two months in advance.</div>)}
                                    isOutsideRange={(day) => day.isBefore(moment().subtract(1, 'd')) || day.isAfter(moment().add(2,'M'))}/>
                                  <div className="labeled-box-label">Date of Expense</div>
            </div>
          </Col>
        </Row>
        <Row className="mt-2">
          <Col>
            <div className="labeled-box jr-step-2">
              <ValidatedInput context={this}
                              type="textarea"
                              rows={3}
                              validation={(d) => !!d}
                              name="description"
                              value={params.description}
                              onChange={this.changeParams.bind(this)}
                              feedback="Description is Required" />
              <div className="labeled-box-label">Description of purchase</div>
            </div>
          </Col>
          <Col>
            <div className="labeled-box mt-2 jr-step-5">
              <Select name="approval_logs"
                       value={approval_logs}
                       multi={true}
                       onChange={this.change.bind(this)}
                       options={approvers.map(p => {
                         return {label: p.name, value: p.id}
                       })} />
              <div className="labeled-box-label">Approver</div>
            </div>
            {properties.length > 1 && <div className="labeled-box mt-2 jr-step-5">
               <Select name="addtlProperty"
                       value={addtlProperty}
                       multi={true}
                       onChange={this.change.bind(this)}
                       options={properties.filter(x => x.id !== property_id).map(p => {
                         return {label: p.name, value: p.id}
                       })} />
              <div className="labeled-box-label">Additional Locations</div>
            </div>}
            <div className="labeled-box mt-2">
              <ValidatedInput context={this}
                              type="text"
                              validation={(d) => !!d}
                              name="unit"
                              value={unit}
                              onChange={this.change.bind(this)}
                              feedback="Unit is required. If this request is not for a unit please put N/A" />
              <div className="labeled-box-label">Unit</div>
            </div>
          </Col>
        </Row>
        <Row>
          <Col>
            <div className="labeled-box">
              <ValidatedInput context={this}
                              type="number"
                              validation={(d) => !!d}
                              name="amount"
                              placeholder="Please choose the best category and amount below"
                              value={params.amount}
                              disabled
                              onChange={this.changeParams.bind(this)}
                              feedback="Amount is Required" />
              <div className="labeled-box-label">Total amount of purchase</div>
            </div>
            <Table borderless striped className="mt-1">
              <thead>
                <tr className="jr-step-3">
                  <th>Category</th>
                  <th>Amount</th>
                  <th />
                </tr>
              </thead>
              <tbody>
                {costs.map((c, i) => {
                  let cat = accountingCategories.filter(a => a.id === c.category_id)[0]
                  return <React.Fragment key={i}>
                    <tr className={i === 0 ? 'jr-step-4' : ''}>
                      <td className="w-75">
                        <Select name="category_id"
                                value={c.category_id}
                                onChange={this.changeCosts.bind(this, i)}
                                options={accountingCategories.map(p => {
                                  return {label: p.name, value: p.id}
                                })} />
                      </td>
                      <td>
                        <Input type="number" name="amount" value={parseFloat(c.amount)} onChange={this.changeCosts.bind(this, i)}/>
                      </td>
                      <td className="text-warning">
                        {i !== 0 && c.amount && <i className="fas fa-trash" onClick={this.deleteCostObject.bind(this, i)} />}
                      </td>
                    </tr>
                      {cat && <React.Fragment>
                        <tr className="mt-0">
                          <td>Spent This Month So Far<small>/with this request</small></td>
                          <td className="cursor-pointer" onClick={cat.spent > 0 ? this.toggleMoneySpentModal.bind(this, cat.id) : null} colSpan={2}><b>{toCurr(cat.spent)}</b>/<small>{toCurr(parseFloat(cat.spent) + parseFloat(c.amount) || 0)}</small></td>
                        </tr>
                      </React.Fragment>}
                  </React.Fragment>
                })}
              </tbody>
            </Table>
          </Col>
          <Col>
            <Row>
              <Col>
                <ListGroup>
                  <ListGroupItem className="d-flex justify-content-between jr-step-7">
                    <span>Attachments <span className="badge badge-info">{attachments.length}</span></span>
                  </ListGroupItem>
                  {attachments.map((a, i) => {
                    return <ListGroupItem key={i} className="d-flex justify-content-between">
                      <span>{a.filename}</span>
                      <span><i onClick={this.removeAttachment.bind(this, i)} className="fa fa-times cursor-pointer" /></span>
                    </ListGroupItem>
                  })}
                </ListGroup>
              </Col>
              <Col className="jr-step-6">
                <Uploader ref="child" onChange={this.addAttachment.bind(this)} placeholder="Click or Drag Here" multiple/>
              </Col>
            </Row>
            <Row className="mt-1">
              <Col className="d-flex justify-content-around">
                <Button onClick={this.toggleTutorial.bind(this)} color="success">Walkthrough</Button>
                <Button onClick={this.clear.bind(this)} color="warning">Clear</Button>
                <Button onClick={() => history.push("/approvals")} color="secondary">Cancel</Button>
                <Button className="jr-step-8" onClick={this.canSave.bind(this)} color="success">Save</Button>
              </Col>
            </Row>
          </Col>
        </Row>
      </Col>
    </Row>
  }
}

export default connect(({approvals, payees, approvers, properties, accountingCategories}) => {
  return {approvals, payees, approvers, properties, accountingCategories}
})(NewApproval);
