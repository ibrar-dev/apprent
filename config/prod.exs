use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# AppCountWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.

config :app_count,
       AppCountWeb.Endpoint,
       #  load_from_system_env: true,
       check_origin: false,
       http: [
         port: 80,
         protocol_options: [
           max_request_line_length: 8192,
           max_header_value_length: 8192,
           max_header_name_length: 4000,
           max_headers: 1000
         ]
       ],
       url: [
         host: System.get_env("HOSTNAME"),
         port: 80
       ],
       cache_static_manifest: "priv/static/cache_manifest.json"

config :phoenix, :serve_endpoints, true
config :phoenix, :filter_parameters, ["password", "ssn", "saved_form", "pin", "application_form"]

config :honeybadger,
  environment_name: String.to_atom(System.get_env("APP_ENV")),
  filter_keys: [:password, :ssn, :saved_form, :pin, :application_form]

config :app_count,
       AppCountCom.Mailer.SES,
       adapter: Bamboo.SMTPAdapter,
       server: System.get_env("SES_SERVER"),
       port: String.to_integer(System.get_env("SES_PORT")),
       username: System.get_env("SMTP_USERNAME"),
       password: System.get_env("SMTP_PASSWORD"),
       tls: :always,
       # can be `:always` or `:never`
       ssl: false,
       # can be `true`
       retries: 10

config :app_count, AppCountCom.Mailer.Dev, adapter: Bamboo.LocalAdapter

# config :app_count, AppCountWeb.Endpoint, server: true
# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :app_count, AppCountWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :app_count, AppCountWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#

config :app_count,
       AppCount.Repo,
       url: System.get_env("DB_URL")

config :ex_aws,
  access_key_id: [System.get_env("AWS_ACCESS_KEY"), :instance_role],
  secret_access_key: [System.get_env("AWS_SECRET"), :instance_role],
  region: "us-east-2"

config :app_count, AppCount, %{
  environment: String.to_atom(System.get_env("APP_ENV")),
  authorize_env: String.to_atom(System.get_env("AUTHORIZE_ENV")),
  apprent_crypt: %{
    secret: System.get_env("APPRENT_CRYPT"),
    sign: System.get_env("APPRENT_SIGN")
  },
  forms_iv: System.get_env("FORMS_IV"),
  rent_apply_key:
    System.get_env("RENT_APPLY_KEY")
    |> String.to_integer(),
  socket_path:
    System.get_env("SOCKET_PATH")
    |> URI.encode_www_form(),
  crypto_server_path: "/var/crypto",
  local_crypto_key: System.get_env("LOCAL_CRYPTO_KEY"),
  home_url: "https://#{System.get_env("HOSTNAME")}",
  tz: "US/Eastern"
}

config :app_count, AppCount.Core.FeatureFlags, using_soft_ledger: false

config :app_count, TenantSafe, %{
  postback: "https://administration.#{System.get_env("HOSTNAME")}/tenant_safe"
}

config :app_count, AppCount.Adapters.Twilio.Credential,
  sid: System.get_env("TWILIO_SID"),
  token: System.get_env("TWILIO_TOKEN"),
  phone_from: System.get_env("TWILIO_PHONE_FROM"),
  url: "https://api.twilio.com/2010-04-01/Accounts/#{System.get_env("TWILIO_SID")}/Messages.json"

config :app_count, AppCount.Adapters.Zendesk.Credential,
  subdomain: System.get_env("ZENDESK_SUBDOMAIN"),
  user: System.get_env("ZENDESK_USER"),
  api_token: System.get_env("ZENDESK_API_TOKEN")

config :app_count, AppCount.Adapters.SoftLedger.Credential,
  grant_type: System.get_env("SOFTLEDGER_GRANT_TYPE"),
  audience: System.get_env("SOFTLEDGER_AUDIENCE"),
  client_id: System.get_env("SOFTLEDGER_CLIENT_ID"),
  client_secret: System.get_env("SOFTLEDGER_CLIENT_SECRET"),
  tenantUUID: System.get_env("SOFTLEDGER_TENANT_UUID")

config :app_count, AppCount.Adapters.SoftLedger.Config,
  url: "https://api.softledger.com/api",
  # production underscore_id for root location is 3429
  parent_id: 3429,
  # WIP, TODO, David look here
  ar_account_id: "GET THIS NUMBER FROM WEB UI"

# Finally import the config/prod.secret.exs
# which should be versioned separately.
# import_config "prod.secret.exs"
